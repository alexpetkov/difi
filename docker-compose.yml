version: '3.8'

services:
  # Core Services
  api-init:
    image: langgenius/dify-api:0.15.3
    env_file:
      - .env
    environment:
      - FLASK_APP=app:create_app
      - PYTHONUNBUFFERED=1
    entrypoint: [] # Override the default entrypoint
    command: >
      sh -c "
        echo 'Starting initialization...' &&
        cd /app/api &&
        echo 'Changed to /app/api directory' &&
        echo 'Installing dependencies...' &&
        pip install -e . &&
        echo 'Running flask db upgrade...' &&
        flask db upgrade &&
        echo 'Running flask init...' &&
        flask init &&
        echo 'Initialization complete!'
      "
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dify-network

  api:
    image: langgenius/dify-api:0.15.3
    restart: always
    env_file:
      - .env
    environment:
      - CONSOLE_API_URL=http://localhost:5001
      - CONSOLE_WEB_URL=http://localhost
      - SERVICE_API_URL=http://localhost:5001
      - APP_API_URL=http://localhost:5001
      - FLASK_APP=app:create_app
    ports:
      - "5001:5001"
    command: >
      sh -c "
        cd /app/api &&
        gunicorn 'app:create_app()' --workers 1 --worker-class gevent --bind 0.0.0.0:5001 --timeout 300
      "
    depends_on:
      api-init:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_started
    networks:
      - dify-network

  worker:
    image: langgenius/dify-api:0.15.3
    restart: always
    env_file:
      - .env
    environment:
      - CONSOLE_API_URL=http://localhost:5001
      - CONSOLE_WEB_URL=http://localhost
      - SERVICE_API_URL=http://localhost:5001
      - APP_API_URL=http://localhost:5001
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dify-network

  web:
    image: langgenius/dify-web:0.15.3
    restart: always
    env_file:
      - .env
    networks:
      - dify-network

  # Dependencies
  db:
    image: postgres:15-alpine
    restart: always
    env_file:
      - .env
    volumes:
      - ./volumes/postgres/data:/var/lib/postgresql/data
    networks:
      - dify-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    restart: always
    volumes:
      - ./volumes/redis/data:/data
    networks:
      - dify-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  weaviate:
    image: semitechnologies/weaviate:1.19.0
    restart: always
    env_file:
      - .env
    environment:
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - CLUSTER_HOSTNAME=node1
    volumes:
      - ./volumes/weaviate/data:/var/lib/weaviate
    networks:
      - dify-network

  nginx:
    image: nginx:latest
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - api
      - web
    networks:
      - dify-network

  sandbox:
    image: langgenius/dify-sandbox:0.2.1
    restart: always
    networks:
      - dify-network

  ssrf_proxy:
    image: ubuntu/squid:latest
    restart: always
    networks:
      - dify-network
      - ssrf_proxy_network

networks:
  dify-network:
    driver: bridge
  ssrf_proxy_network:
    driver: bridge
